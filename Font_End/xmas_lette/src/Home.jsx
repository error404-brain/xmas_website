import { useState, useRef, useEffect } from "react";
import Snowfall from "react-snowfall";

function Home() {
  const [showLetter, setShowLetter] = useState(false);
  const [showScheduleForm, setShowScheduleForm] = useState(false);
  const [scheduledTime, setScheduledTime] = useState("");
  const [showGame, setShowGame] = useState(false);
  const [shuffledPieces, setShuffledPieces] = useState([]);
  const [currentGrid, setCurrentGrid] = useState(Array(9).fill(null)); // L∆∞·ªõi 3x3

  const musicRef = useRef(new Audio("/song.mp3")); // Qu·∫£n l√Ω nh·∫°c

  // T·∫°o c√°c m·∫£nh gh√©p v√† x√°o tr·ªôn v·ªã tr√≠
  useEffect(() => {
    if (showGame) {
      const pieces = [
        { id: "0_0", img: "/piece_0_0.png" },
        { id: "0_1", img: "/piece_0_1.png" },
        { id: "0_2", img: "/piece_0_2.png" },
        { id: "1_0", img: "/piece_1_0.png" },
        { id: "1_1", img: "/piece_1_1.png" },
        { id: "1_2", img: "/piece_1_2.png" },
        { id: "2_0", img: "/piece_2_0.png" },
        { id: "2_1", img: "piece_2_1.png" },
        { id: "2_2", img: "piece_2_2.png" },
      ];

      // X√°o tr·ªôn c√°c m·∫£nh gh√©p
      setShuffledPieces([...pieces].sort(() => Math.random() - 0.5));
      setCurrentGrid(Array(9).fill(null));
    }
  }, [showGame]);

  const handleOpenLetter = () => {
    setShowLetter(true);
    const music = musicRef.current;
    music.play();
    music.loop = true; // L·∫∑p nh·∫°c
  };

  const handleStopMusic = () => {
    setShowLetter(false);
    const music = musicRef.current;
    music.pause();
    music.currentTime = 0; // ƒê·∫∑t l·∫°i th·ªùi gian ph√°t nh·∫°c
  };

  const handleScheduleGift = () => {
    setShowScheduleForm(true);
  };

  const handleScheduleSubmit = (e) => {
    e.preventDefault();
    setShowScheduleForm(false);
    alert(`Qu√† s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o: ${scheduledTime}`); // Ho·∫∑c th√™m x·ª≠ l√Ω g·ª≠i th√¥ng b√°o
  };

  const handleDrop = (index) => (event) => {
    const pieceId = event.dataTransfer.getData("pieceId");

    const piece = shuffledPieces.find((p) => p.id === pieceId);
    if (piece) {
      const newGrid = [...currentGrid];
      newGrid[index] = piece;
      setCurrentGrid(newGrid);

      // Lo·∫°i b·ªè m·∫£nh gh√©p kh·ªèi danh s√°ch ch∆∞a ƒë·∫∑t
      setShuffledPieces(shuffledPieces.filter((p) => p.id !== pieceId));
    }
  };

  const allowDrop = (event) => {
    event.preventDefault();
  };

  const handleDragStart = (pieceId) => (event) => {
    event.dataTransfer.setData("pieceId", pieceId);
  };

  const isPuzzleSolved = () => {
    const solution = [
      "0_0", "0_1", "0_2",
      "1_0", "1_1", "1_2",
      "2_0", "2_1", "2_2",
    ];
    return solution.every((id, idx) => currentGrid[idx]?.id === id);
  };

  const handleStopGame = () => {
    if (isPuzzleSolved()) {
      alert("Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh b·ª©c h√¨nh üéâ");
    } else {
      alert("Ch∆∞a ho√†n th√†nh. Ti·∫øp t·ª•c nh√©!");
    }
    setShowGame(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-red-500 to-green-500 flex justify-center items-center text-white relative">
      <Snowfall />

      {!showLetter && !showGame ? (
        <div className="text-center">
          <h1 className="text-3xl sm:text-4xl font-bold mb-6">Merry Christmas G·∫•u üéÑ</h1>
          <p className="mb-8 text-base sm:text-lg">ƒê√¢y l√† th√¥ng ƒëi·ªáp cho b·∫°n n√®</p>
          <div className="space-x-4">
            <button
              onClick={handleOpenLetter}
              className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded-lg text-xl font-semibold shadow-lg"
            >
              M·ªü Thi·ªáp üéÅ
            </button>
            <button
              onClick={handleScheduleGift}
              className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg text-xl font-semibold shadow-lg"
            >
              L√™n L·ªãch üìÖ
            </button>
            <button
              onClick={() => setShowGame(true)}
              className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg text-xl font-semibold shadow-lg"
            >
              Ch∆°i Gh√©p H√¨nh üß©
            </button>
          </div>
        </div>
      ) : null}

      {showLetter && (
        <div className="bg-white text-gray-800 p-8 rounded-lg shadow-lg text-center max-w-lg mx-auto">
          <h1 className="text-2xl sm:text-3xl font-romantic text-red-500 mb-4">Ch√†o b·∫°n G·∫•u,</h1>
          <p className="text-base sm:text-lg leading-relaxed">
            Nh√¢n d·ªãp Gi√°ng Sinh, m√¨nh ch·ªâ mu·ªën n√≥i r·∫±ng b·∫°n l√† ng∆∞·ªùi ƒë·∫∑c bi·ªát nh·∫•t. N·ª• c∆∞·ªùi c·ªßa b·∫°n l√†m s√°ng b·ª´ng c·∫£ ng√†y c·ªßa m√¨nh, v√† m·ªói kho·∫£nh kh·∫Øc b√™n b·∫°n ƒë·ªÅu th·∫≠t k·ª≥ di·ªáu. C·∫£m ∆°n b·∫°n v√¨ t·∫•t c·∫£! üéÖüéÑ
          </p>
          <p className="mt-4 text-base sm:text-lg">
            Ch√∫c b·∫°n m·ªôt m√πa Gi√°ng Sinh an l√†nh, tr√†n ƒë·∫ßy ni·ªÅm vui v√† h·∫°nh ph√∫c. üòäüíñ
          </p>
          <div className="mt-6">
            <button
              onClick={handleStopMusic}
              className="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg"
            >
              Tr·ªü v·ªÅ Trang Ch·ªß
            </button>
          </div>
        </div>
      )}

      {showScheduleForm && (
        <div className="absolute inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-white p-6 rounded-lg shadow-lg text-center">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Ch·ªçn Ng√†y V√† Gi·ªù G·ª≠i Qu√† üéÅ</h2>
            <form onSubmit={handleScheduleSubmit}>
              <input
                type="datetime-local"
                value={scheduledTime}
                onChange={(e) => setScheduledTime(e.target.value)}
                className="border rounded-lg p-2 mb-4 w-full"
                required
              />
              <div className="space-x-4">
                <button type="submit" className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg">
                  X√°c Nh·∫≠n
                </button>
                <button
                  type="button"
                  onClick={() => setShowScheduleForm(false)}
                  className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg"
                >
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showGame && (
        <div className="bg-black bg-opacity-50 flex flex-col justify-center items-center absolute inset-0">
          <div
            className="grid grid-cols-3 gap-2 bg-gray-200 p-4 rounded-lg"
            style={{ width: "300px", height: "300px" }}
          >
            {currentGrid.map((piece, index) => (
              <div
                key={index}
                onDrop={handleDrop(index)}
                onDragOver={allowDrop}
                className="border border-gray-400 flex items-center justify-center"
                style={{ width: "100px", height: "100px" }}
              >
                {piece && (
                  <img
                    src={piece.img}
                    alt={`piece-${piece.id}`}
                    style={{ width: "100px", height: "100px" }}
                    draggable="false"
                  />
                )}
              </div>
            ))}
          </div>

          {/* C√°c m·∫£nh gh√©p ch∆∞a ƒë·∫∑t */}
          <div className="flex justify-center mt-6 gap-2">
            {shuffledPieces.map((piece) => (
              <div
                key={piece.id}
                draggable
                onDragStart={handleDragStart(piece.id)}
                className="cursor-pointer"
              >
                <img
                  src={piece.img}
                  alt={`piece-${piece.id}`}
                  style={{ width: "100px", height: "100px" }}
                />
              </div>
            ))}
          </div>

          <button
            onClick={handleStopGame}
            className="mt-8 bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg"
          >
            K·∫øt Th√∫c Game
          </button>
        </div>
      )}
    </div>
  );
}

export default Home;
